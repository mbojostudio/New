"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils/utils");
const GOOGLE_CONSTANT_1 = __importDefault(require("../constant/GOOGLE_CONSTANT"));
const axios_1 = __importDefault(require("axios"));
/**
 * Scrap google images scripts tag
 * @param url
 * @returns
 */
function scrapGoogleImages(url, proxy) {
    return __awaiter(this, void 0, void 0, function* () {
        const { data } = yield (0, axios_1.default)(url, Object.assign({ headers: GOOGLE_CONSTANT_1.default.headers }, (proxy !== null && proxy !== void 0 ? proxy : {})));
        return data;
    });
}
/**
 * Construct the final object image from regex match with all informations
 * @param informationsMatch
 * @param otherInformationsMatch
 * @returns
 */
function getGoogleImageObject(informationsMatch, otherInformationsMatch) {
    return {
        id: otherInformationsMatch[1],
        title: otherInformationsMatch[3],
        url: (0, utils_1.unicodeToChar)(informationsMatch[1]),
        originalUrl: otherInformationsMatch[2],
        height: parseInt(informationsMatch[2], 10),
        width: parseInt(informationsMatch[3], 10),
    };
}
/**
 * Parse the html from google image to get the images links
 * @param url
 * @returns
 */
function parseGoogleImages(url, proxy) {
    return __awaiter(this, void 0, void 0, function* () {
        const result = [];
        const body = yield scrapGoogleImages(url, proxy);
        //getting image url, height, width, color average
        const informationsRegex = /\["(http[^"]+?)",(\d+),(\d+)\]/gi;
        //getting originalUrl, title, id
        const otherInformationsRegex = /\[[\w\d]+?,"([^"]+?)","(http[^"]+?)","([^"]+?)"/gi;
        let informationsMatch;
        while ((informationsMatch = informationsRegex.exec(body)) !== null) {
            if (informationsMatch[1].startsWith("https://encrypted-tbn0.gstatic.com"))
                continue;
            const otherInformationsMatch = otherInformationsRegex.exec(body);
            if (otherInformationsMatch === null)
                return result;
            if (informationsMatch.length < 4 || otherInformationsMatch.length < 4)
                continue;
            if (informationsMatch[1].match(/http/gi).length > 2 ||
                otherInformationsMatch[2].match(/http/gi).length > 2)
                continue;
            result.push(getGoogleImageObject(informationsMatch, otherInformationsMatch));
        }
        return result;
    });
}
exports.default = parseGoogleImages;
//# sourceMappingURL=parseGoogleImages.js.map